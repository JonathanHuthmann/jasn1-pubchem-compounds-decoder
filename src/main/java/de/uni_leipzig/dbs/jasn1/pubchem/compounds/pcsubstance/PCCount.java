/**
 * This class file was automatically generated by jASN1 v1.8.0 (http://www.openmuc.org)
 */

package de.uni_leipzig.dbs.jasn1.pubchem.compounds.pcsubstance;

import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;

import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.BerTag;
import org.openmuc.jasn1.ber.types.BerInteger;

/**
 * Compound Record
 */
public class PCCount implements Serializable {

  private static final long serialVersionUID = 1L;

  public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

  public byte[] code = null;
  private BerInteger heavyAtom = null;
  private BerInteger atomChiral = null;
  private BerInteger atomChiralDef = null;
  private BerInteger atomChiralUndef = null;
  private BerInteger bondChiral = null;
  private BerInteger bondChiralDef = null;
  private BerInteger bondChiralUndef = null;
  private BerInteger isotopeAtom = null;
  private BerInteger covalentUnit = null;
  private BerInteger tautomers = null;

  public PCCount() {
  }

  public PCCount(final byte[] code) {
    this.code = code;
  }

  public void setHeavyAtom(final BerInteger heavyAtom) {
    this.heavyAtom = heavyAtom;
  }

  /**
   * @return Total count of non-Hydrogen (Heavy) Atoms
   */
  public BerInteger getHeavyAtom() {
    return heavyAtom;
  }

  public void setAtomChiral(final BerInteger atomChiral) {
    this.atomChiral = atomChiral;
  }

  /**
   * @return Total count of (SP3) Chiral Atoms
   */
  public BerInteger getAtomChiral() {
    return atomChiral;
  }

  public void setAtomChiralDef(final BerInteger atomChiralDef) {
    this.atomChiralDef = atomChiralDef;
  }

  /**
   * @return Total count of Defined (SP3) Chiral Atoms
   */
  public BerInteger getAtomChiralDef() {
    return atomChiralDef;
  }

  public void setAtomChiralUndef(final BerInteger atomChiralUndef) {
    this.atomChiralUndef = atomChiralUndef;
  }

  /**
   * @return Total count of Undefined (SP3) Chiral Atoms
   */
  public BerInteger getAtomChiralUndef() {
    return atomChiralUndef;
  }

  public void setBondChiral(final BerInteger bondChiral) {
    this.bondChiral = bondChiral;
  }

  /**
   * @return Total count of (SP2) Chiral Bonds
   */
  public BerInteger getBondChiral() {
    return bondChiral;
  }

  public void setBondChiralDef(final BerInteger bondChiralDef) {
    this.bondChiralDef = bondChiralDef;
  }

  /**
   * @return Total count of (SP2) Defined Chiral Bonds
   */
  public BerInteger getBondChiralDef() {
    return bondChiralDef;
  }

  public void setBondChiralUndef(final BerInteger bondChiralUndef) {
    this.bondChiralUndef = bondChiralUndef;
  }

  /**
   * @return Total count of (SP2) Undefined Chiral Bonds
   */
  public BerInteger getBondChiralUndef() {
    return bondChiralUndef;
  }

  public void setIsotopeAtom(final BerInteger isotopeAtom) {
    this.isotopeAtom = isotopeAtom;
  }

  /**
   * @return Total count of Atoms with Isotopic Information
   */
  public BerInteger getIsotopeAtom() {
    return isotopeAtom;
  }

  public void setCovalentUnit(final BerInteger covalentUnit) {
    this.covalentUnit = covalentUnit;
  }

  /**
   * @return Total count of covalently-bonded units in the record
   */
  public BerInteger getCovalentUnit() {
    return covalentUnit;
  }

  public void setTautomers(final BerInteger tautomers) {
    this.tautomers = tautomers;
  }

  /**
   * @return Number of possible tautomers (Max. 999)
   */
  public BerInteger getTautomers() {
    return tautomers;
  }

  public int decode(final InputStream is) throws IOException {
    return decode(is, true);
  }

  public int decode(final InputStream is, final boolean withTag) throws IOException {
    int codeLength = 0;
    int subCodeLength = 0;
    BerTag berTag = new BerTag();

    if (withTag) {
      codeLength += tag.decodeAndCheck(is);
    }

    BerLength length = new BerLength();
    codeLength += length.decode(is);

    int totalLength = length.val;
    if (totalLength == -1) {
      subCodeLength += berTag.decode(is);

      if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
        codeLength += length.decode(is);
        heavyAtom = new BerInteger();
        subCodeLength += heavyAtom.decode(is, true);
        subCodeLength += berTag.decode(is);
        if (length.val == -1) {
          is.read();
          berTag.decode(is);
        }
      }

      if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
        codeLength += length.decode(is);
        atomChiral = new BerInteger();
        subCodeLength += atomChiral.decode(is, true);
        subCodeLength += berTag.decode(is);
        if (length.val == -1) {
          is.read();
          berTag.decode(is);
        }
      }

      if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
        codeLength += length.decode(is);
        atomChiralDef = new BerInteger();
        subCodeLength += atomChiralDef.decode(is, true);
        subCodeLength += berTag.decode(is);
        if (length.val == -1) {
          is.read();
          berTag.decode(is);
        }
      }

      if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
        codeLength += length.decode(is);
        atomChiralUndef = new BerInteger();
        subCodeLength += atomChiralUndef.decode(is, true);
        subCodeLength += berTag.decode(is);
        if (length.val == -1) {
          is.read();
          berTag.decode(is);
        }
      }

      if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
        codeLength += length.decode(is);
        bondChiral = new BerInteger();
        subCodeLength += bondChiral.decode(is, true);
        subCodeLength += berTag.decode(is);
        if (length.val == -1) {
          is.read();
          berTag.decode(is);
        }
      }

      if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
        codeLength += length.decode(is);
        bondChiralDef = new BerInteger();
        subCodeLength += bondChiralDef.decode(is, true);
        subCodeLength += berTag.decode(is);
        if (length.val == -1) {
          is.read();
          berTag.decode(is);
        }
      }

      if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
        codeLength += length.decode(is);
        bondChiralUndef = new BerInteger();
        subCodeLength += bondChiralUndef.decode(is, true);
        subCodeLength += berTag.decode(is);
        if (length.val == -1) {
          is.read();
          berTag.decode(is);
        }
      }

      if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
        codeLength += length.decode(is);
        isotopeAtom = new BerInteger();
        subCodeLength += isotopeAtom.decode(is, true);
        subCodeLength += berTag.decode(is);
        if (length.val == -1) {
          is.read();
          berTag.decode(is);
        }
      }

      if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
        codeLength += length.decode(is);
        covalentUnit = new BerInteger();
        subCodeLength += covalentUnit.decode(is, true);
        subCodeLength += berTag.decode(is);
        if (length.val == -1) {
          is.read();
          berTag.decode(is);
        }
      }

      if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
        codeLength += length.decode(is);
        tautomers = new BerInteger();
        subCodeLength += tautomers.decode(is, true);
        subCodeLength += berTag.decode(is);
        if (length.val == -1) {
          is.read();
          berTag.decode(is);
        }
      }
      int nextByte = is.read();
      if (berTag.tagNumber != 0 || berTag.tagClass != 0 || berTag.primitive != 0 || nextByte != 0) {
        if (nextByte == -1) {
          throw new EOFException("Unexpected end of input stream.");
        }
        throw new IOException("Decoded sequence has wrong end of contents octets");
      }
      codeLength += subCodeLength + 1;
      return codeLength;
    }
    throw new IOException("Unexpected end of sequence, length tag: " + totalLength
        + " But only indefinite length tag supported");
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    appendAsString(sb, 0);
    return sb.toString();
  }

  public void appendAsString(final StringBuilder sb, final int indentLevel) {

    sb.append("{");
    sb.append("\n");
    for (int i = 0; i < indentLevel + 1; i++) {
      sb.append("\t");
    }
    if (heavyAtom != null) {
      sb.append("heavyAtom: ").append(heavyAtom);
    } else {
      sb.append("heavyAtom: <empty-required-field>");
    }

    sb.append(",\n");
    for (int i = 0; i < indentLevel + 1; i++) {
      sb.append("\t");
    }
    if (atomChiral != null) {
      sb.append("atomChiral: ").append(atomChiral);
    } else {
      sb.append("atomChiral: <empty-required-field>");
    }

    sb.append(",\n");
    for (int i = 0; i < indentLevel + 1; i++) {
      sb.append("\t");
    }
    if (atomChiralDef != null) {
      sb.append("atomChiralDef: ").append(atomChiralDef);
    } else {
      sb.append("atomChiralDef: <empty-required-field>");
    }

    sb.append(",\n");
    for (int i = 0; i < indentLevel + 1; i++) {
      sb.append("\t");
    }
    if (atomChiralUndef != null) {
      sb.append("atomChiralUndef: ").append(atomChiralUndef);
    } else {
      sb.append("atomChiralUndef: <empty-required-field>");
    }

    sb.append(",\n");
    for (int i = 0; i < indentLevel + 1; i++) {
      sb.append("\t");
    }
    if (bondChiral != null) {
      sb.append("bondChiral: ").append(bondChiral);
    } else {
      sb.append("bondChiral: <empty-required-field>");
    }

    sb.append(",\n");
    for (int i = 0; i < indentLevel + 1; i++) {
      sb.append("\t");
    }
    if (bondChiralDef != null) {
      sb.append("bondChiralDef: ").append(bondChiralDef);
    } else {
      sb.append("bondChiralDef: <empty-required-field>");
    }

    sb.append(",\n");
    for (int i = 0; i < indentLevel + 1; i++) {
      sb.append("\t");
    }
    if (bondChiralUndef != null) {
      sb.append("bondChiralUndef: ").append(bondChiralUndef);
    } else {
      sb.append("bondChiralUndef: <empty-required-field>");
    }

    sb.append(",\n");
    for (int i = 0; i < indentLevel + 1; i++) {
      sb.append("\t");
    }
    if (isotopeAtom != null) {
      sb.append("isotopeAtom: ").append(isotopeAtom);
    } else {
      sb.append("isotopeAtom: <empty-required-field>");
    }

    sb.append(",\n");
    for (int i = 0; i < indentLevel + 1; i++) {
      sb.append("\t");
    }
    if (covalentUnit != null) {
      sb.append("covalentUnit: ").append(covalentUnit);
    } else {
      sb.append("covalentUnit: <empty-required-field>");
    }

    sb.append(",\n");
    for (int i = 0; i < indentLevel + 1; i++) {
      sb.append("\t");
    }
    if (tautomers != null) {
      sb.append("tautomers: ").append(tautomers);
    } else {
      sb.append("tautomers: <empty-required-field>");
    }

    sb.append("\n");
    for (int i = 0; i < indentLevel; i++) {
      sb.append("\t");
    }
    sb.append("}");
  }

  public byte[] getCode() {
    return code;
  }

  public void setCode(final byte[] code) {
    this.code = code;
  }

  public static BerTag getTag() {
    return tag;
  }

  public static long getSerialversionuid() {
    return serialVersionUID;
  }

}
