/**
 * This class file was automatically generated by jASN1 v1.8.0 (http://www.openmuc.org)
 */

package de.uni_leipzig.dbs.jasn1.pubchem.compounds.pcsubstance;

import java.math.BigInteger;

import de.uni_leipzig.dbs.jasn1.pubchem.compounds.pcsubstance.type.custom.PubChemTypedBerInteger;

public class PCUrnDataType extends PubChemTypedBerInteger {

  static final int[] states = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255 };

  static final String[] stateStrings = { "string : String [maps to a VisibleString]",
      "stringlist : List of Strings [maps to VisibleString list]",
      "int : 32-Bit Signed Integer [maps to an INTEGER]",
      "intvec : Vector of 32-Bit Signed Integer [maps to INTEGER vector]",
      "uint : 32-Bit Unsigned Integer [maps to an INTEGER]",
      "uintvec : Vector of 32-Bit Unsigned Integer [maps to INTEGER vector]",
      "double : 64-Bit Float [maps to a REAL]",
      "doublevec : Vector of Double [maps to REAL vector]",
      "bool : Boolean or Binary value [maps to a BOOLEAN]",
      "boolvec : Boolean Vector [maps to BOOLEAN vector]",
      "uint64 : 64-Bit Unsigned Integer (Hex form) [maps to a VisibleString]",
      "binary : Binary Data Blob [maps to an OCTET STRING]", "url : URL [maps to a VisibleString]",
      "unicode : UniCode String [maps to a VisibleString]", "date : ISO8601 Date [maps to a Date]",
      "fingerprint : Binary Fingerprint (Gzip'ped bitlist w/ 4-Byte prefix denoting bit list length)",
      "unknown : Unknown Data Type [maps to a set of VisibleString]" };

  private static final long serialVersionUID = 1L;

  public PCUrnDataType() {
  }

  public PCUrnDataType(final byte[] code) {
    super(code);
  }

  public PCUrnDataType(final BigInteger value) {
    super(value);
  }

  public PCUrnDataType(final long value) {
    super(value);
  }

  public static long getSerialversionuid() {
    return serialVersionUID;
  }

  @Override
  public int[] getStates() {
    return states;
  }

  @Override
  public String[] getStateStrings() {
    return stateStrings;
  }

}
