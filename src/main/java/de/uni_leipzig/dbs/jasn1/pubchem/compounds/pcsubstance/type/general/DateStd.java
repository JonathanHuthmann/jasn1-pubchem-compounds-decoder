/**
 * This class file was automatically generated by jASN1 v1.8.0 (http://www.openmuc.org)
 */

package de.uni_leipzig.dbs.jasn1.pubchem.compounds.pcsubstance.type.general;

import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;

import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.BerTag;
import org.openmuc.jasn1.ber.types.BerInteger;
import org.openmuc.jasn1.ber.types.string.BerVisibleString;

public class DateStd implements Serializable {

  private static final long serialVersionUID = 1L;

  public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

  public byte[] code = null;
  private BerInteger year = null;
  private BerInteger month = null;
  private BerInteger day = null;
  private BerVisibleString season = null;
  private BerInteger hour = null;
  private BerInteger minute = null;
  private BerInteger second = null;

  public DateStd() {
  }

  public DateStd(byte[] code) {
    this.code = code;
  }

  public void setYear(BerInteger year) {
    this.year = year;
  }

  public BerInteger getYear() {
    return year;
  }

  public void setMonth(BerInteger month) {
    this.month = month;
  }

  public BerInteger getMonth() {
    return month;
  }

  public void setDay(BerInteger day) {
    this.day = day;
  }

  public BerInteger getDay() {
    return day;
  }

  public void setSeason(BerVisibleString season) {
    this.season = season;
  }

  public BerVisibleString getSeason() {
    return season;
  }

  public void setHour(BerInteger hour) {
    this.hour = hour;
  }

  public BerInteger getHour() {
    return hour;
  }

  public void setMinute(BerInteger minute) {
    this.minute = minute;
  }

  public BerInteger getMinute() {
    return minute;
  }

  public void setSecond(BerInteger second) {
    this.second = second;
  }

  public BerInteger getSecond() {
    return second;
  }

  public int decode(InputStream is) throws IOException {
    return decode(is, true);
  }

  public int decode(InputStream is, boolean withTag) throws IOException {
    int codeLength = 0;
    int subCodeLength = 0;
    BerTag berTag = new BerTag();

    if (withTag) {
      codeLength += tag.decodeAndCheck(is);
    }

    BerLength length = new BerLength();
    codeLength += length.decode(is);

    int totalLength = length.val;
    if (totalLength == -1) {
      subCodeLength += berTag.decode(is);

      if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
        int nextByte = is.read();
        if (nextByte != 0) {
          if (nextByte == -1) {
            throw new EOFException("Unexpected end of input stream.");
          }
          throw new IOException("Decoded sequence has wrong end of contents octets");
        }
        codeLength += subCodeLength + 1;
        return codeLength;
      }
      if (berTag.equals(BerInteger.tag)) {
        year = new BerInteger();
        subCodeLength += year.decode(is, false);
        subCodeLength += berTag.decode(is);
      }
      if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
        int nextByte = is.read();
        if (nextByte != 0) {
          if (nextByte == -1) {
            throw new EOFException("Unexpected end of input stream.");
          }
          throw new IOException("Decoded sequence has wrong end of contents octets");
        }
        codeLength += subCodeLength + 1;
        return codeLength;
      }
      if (berTag.equals(BerInteger.tag)) {
        month = new BerInteger();
        subCodeLength += month.decode(is, false);
        subCodeLength += berTag.decode(is);
      }
      if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
        int nextByte = is.read();
        if (nextByte != 0) {
          if (nextByte == -1) {
            throw new EOFException("Unexpected end of input stream.");
          }
          throw new IOException("Decoded sequence has wrong end of contents octets");
        }
        codeLength += subCodeLength + 1;
        return codeLength;
      }
      if (berTag.equals(BerInteger.tag)) {
        day = new BerInteger();
        subCodeLength += day.decode(is, false);
        subCodeLength += berTag.decode(is);
      }
      if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
        int nextByte = is.read();
        if (nextByte != 0) {
          if (nextByte == -1) {
            throw new EOFException("Unexpected end of input stream.");
          }
          throw new IOException("Decoded sequence has wrong end of contents octets");
        }
        codeLength += subCodeLength + 1;
        return codeLength;
      }
      if (berTag.equals(BerVisibleString.tag)) {
        season = new BerVisibleString();
        subCodeLength += season.decode(is, false);
        subCodeLength += berTag.decode(is);
      }
      if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
        int nextByte = is.read();
        if (nextByte != 0) {
          if (nextByte == -1) {
            throw new EOFException("Unexpected end of input stream.");
          }
          throw new IOException("Decoded sequence has wrong end of contents octets");
        }
        codeLength += subCodeLength + 1;
        return codeLength;
      }
      if (berTag.equals(BerInteger.tag)) {
        hour = new BerInteger();
        subCodeLength += hour.decode(is, false);
        subCodeLength += berTag.decode(is);
      }
      if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
        int nextByte = is.read();
        if (nextByte != 0) {
          if (nextByte == -1) {
            throw new EOFException("Unexpected end of input stream.");
          }
          throw new IOException("Decoded sequence has wrong end of contents octets");
        }
        codeLength += subCodeLength + 1;
        return codeLength;
      }
      if (berTag.equals(BerInteger.tag)) {
        minute = new BerInteger();
        subCodeLength += minute.decode(is, false);
        subCodeLength += berTag.decode(is);
      }
      if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
        int nextByte = is.read();
        if (nextByte != 0) {
          if (nextByte == -1) {
            throw new EOFException("Unexpected end of input stream.");
          }
          throw new IOException("Decoded sequence has wrong end of contents octets");
        }
        codeLength += subCodeLength + 1;
        return codeLength;
      }
      if (berTag.equals(BerInteger.tag)) {
        second = new BerInteger();
        subCodeLength += second.decode(is, false);
        subCodeLength += berTag.decode(is);
      }
      int nextByte = is.read();
      if (berTag.tagNumber != 0 || berTag.tagClass != 0 || berTag.primitive != 0 || nextByte != 0) {
        if (nextByte == -1) {
          throw new EOFException("Unexpected end of input stream.");
        }
        throw new IOException("Decoded sequence has wrong end of contents octets");
      }
      codeLength += subCodeLength + 1;
      return codeLength;
    }

    codeLength += totalLength;

    subCodeLength += berTag.decode(is);
    if (berTag.equals(BerInteger.tag)) {
      year = new BerInteger();
      subCodeLength += year.decode(is, false);
      if (subCodeLength == totalLength) {
        return codeLength;
      }
      subCodeLength += berTag.decode(is);
    } else {
      throw new IOException("Tag does not match the mandatory sequence element tag.");
    }

    if (berTag.equals(BerInteger.tag)) {
      month = new BerInteger();
      subCodeLength += month.decode(is, false);
      if (subCodeLength == totalLength) {
        return codeLength;
      }
      subCodeLength += berTag.decode(is);
    }

    if (berTag.equals(BerInteger.tag)) {
      day = new BerInteger();
      subCodeLength += day.decode(is, false);
      if (subCodeLength == totalLength) {
        return codeLength;
      }
      subCodeLength += berTag.decode(is);
    }

    if (berTag.equals(BerVisibleString.tag)) {
      season = new BerVisibleString();
      subCodeLength += season.decode(is, false);
      if (subCodeLength == totalLength) {
        return codeLength;
      }
      subCodeLength += berTag.decode(is);
    }

    if (berTag.equals(BerInteger.tag)) {
      hour = new BerInteger();
      subCodeLength += hour.decode(is, false);
      if (subCodeLength == totalLength) {
        return codeLength;
      }
      subCodeLength += berTag.decode(is);
    }

    if (berTag.equals(BerInteger.tag)) {
      minute = new BerInteger();
      subCodeLength += minute.decode(is, false);
      if (subCodeLength == totalLength) {
        return codeLength;
      }
      subCodeLength += berTag.decode(is);
    }

    if (berTag.equals(BerInteger.tag)) {
      second = new BerInteger();
      subCodeLength += second.decode(is, false);
      if (subCodeLength == totalLength) {
        return codeLength;
      }
    }
    throw new IOException("Unexpected end of sequence, length tag: " + totalLength
        + ", actual sequence length: " + subCodeLength);

  }

  public String toString() {
    StringBuilder sb = new StringBuilder();
    appendAsString(sb, 0);
    return sb.toString();
  }

  public void appendAsString(StringBuilder sb, int indentLevel) {

    sb.append("{");
    sb.append("\n");
    for (int i = 0; i < indentLevel + 1; i++) {
      sb.append("\t");
    }
    if (year != null) {
      sb.append("year: ").append(year);
    } else {
      sb.append("year: <empty-required-field>");
    }

    if (month != null) {
      sb.append(",\n");
      for (int i = 0; i < indentLevel + 1; i++) {
        sb.append("\t");
      }
      sb.append("month: ").append(month);
    }

    if (day != null) {
      sb.append(",\n");
      for (int i = 0; i < indentLevel + 1; i++) {
        sb.append("\t");
      }
      sb.append("day: ").append(day);
    }

    if (season != null) {
      sb.append(",\n");
      for (int i = 0; i < indentLevel + 1; i++) {
        sb.append("\t");
      }
      sb.append("season: ").append(season);
    }

    if (hour != null) {
      sb.append(",\n");
      for (int i = 0; i < indentLevel + 1; i++) {
        sb.append("\t");
      }
      sb.append("hour: ").append(hour);
    }

    if (minute != null) {
      sb.append(",\n");
      for (int i = 0; i < indentLevel + 1; i++) {
        sb.append("\t");
      }
      sb.append("minute: ").append(minute);
    }

    if (second != null) {
      sb.append(",\n");
      for (int i = 0; i < indentLevel + 1; i++) {
        sb.append("\t");
      }
      sb.append("second: ").append(second);
    }

    sb.append("\n");
    for (int i = 0; i < indentLevel; i++) {
      sb.append("\t");
    }
    sb.append("}");
  }

}
