/**
 * This class file was automatically generated by jASN1 v1.8.0 (http://www.openmuc.org)
 */

package de.uni_leipzig.dbs.jasn1.pubchem.compounds.pcsubstance;

import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;

import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.BerTag;

/**
 * Allowed Stereogenic Center Types [Using IUPAC Stereogenic Center recommendations and terminology]
 */
public class PCStereoCenter implements Serializable {

  private static final long serialVersionUID = 1L;

  public byte[] code = null;
  private PCStereoTetrahedral tetrahedral = null;
  private PCStereoPlanar planar = null;
  private PCStereoSquarePlanar squareplanar = null;
  private PCStereoOctahedral octahedral = null;
  private PCStereoTrigonalBiPyramid bipyramid = null;
  private PCStereoTShape tshape = null;
  private PCStereoPentagonalBiPyramid pentagonal = null;

  public PCStereoCenter() {
  }

  public PCStereoCenter(final byte[] code) {
    this.code = code;
  }

  public void setTetrahedral(final PCStereoTetrahedral tetrahedral) {
    this.tetrahedral = tetrahedral;
  }

  /**
   * @return Tetrahedral (SP3) StereoCenter
   */
  public PCStereoTetrahedral getTetrahedral() {
    return tetrahedral;
  }

  public void setPlanar(final PCStereoPlanar planar) {
    this.planar = planar;
  }

  /**
   * @return Planar (SP2) StereoCenter
   */
  public PCStereoPlanar getPlanar() {
    return planar;
  }

  public void setSquareplanar(final PCStereoSquarePlanar squareplanar) {
    this.squareplanar = squareplanar;
  }

  /**
   * @return Square Planar (SP4) StereoCenter
   */
  public PCStereoSquarePlanar getSquareplanar() {
    return squareplanar;
  }

  public void setOctahedral(final PCStereoOctahedral octahedral) {
    this.octahedral = octahedral;
  }

  /**
   * @return Octahedral (OC-6) / Square Pyramid (SPY-5) StereoCenters
   */
  public PCStereoOctahedral getOctahedral() {
    return octahedral;
  }

  public void setBipyramid(final PCStereoTrigonalBiPyramid bipyramid) {
    this.bipyramid = bipyramid;
  }

  /**
   * @return Trigonal BiPyramid (TBPY-4 and TBPY-5) StereoCenters
   */
  public PCStereoTrigonalBiPyramid getBipyramid() {
    return bipyramid;
  }

  public void setTshape(final PCStereoTShape tshape) {
    this.tshape = tshape;
  }

  /**
   * @return T-Shaped (TS-3) StereoCenters
   */
  public PCStereoTShape getTshape() {
    return tshape;
  }

  public void setPentagonal(final PCStereoPentagonalBiPyramid pentagonal) {
    this.pentagonal = pentagonal;
  }

  /**
   * @return Pentagonal BiPyramid (PBPY-7) StereoCenters
   */
  public PCStereoPentagonalBiPyramid getPentagonal() {
    return pentagonal;
  }

  public int decode(final InputStream is) throws IOException {
    return decode(is, null);
  }

  public int decode(final InputStream is, BerTag berTag) throws IOException {

    int codeLength = 0;
    BerTag passedTag = berTag;

    if (berTag == null) {
      berTag = new BerTag();
      codeLength += berTag.decode(is);
    }

    if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
      codeLength += BerLength.skip(is);
      tetrahedral = new PCStereoTetrahedral();
      codeLength += tetrahedral.decode(is, true);
      return codeLength;
    }

    if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
      codeLength += BerLength.skip(is);
      planar = new PCStereoPlanar();
      codeLength += planar.decode(is, true);
      return codeLength;
    }

    if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
      codeLength += BerLength.skip(is);
      squareplanar = new PCStereoSquarePlanar();
      codeLength += squareplanar.decode(is, true);
      return codeLength;
    }

    if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
      codeLength += BerLength.skip(is);
      octahedral = new PCStereoOctahedral();
      codeLength += octahedral.decode(is, true);
      return codeLength;
    }

    if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
      codeLength += BerLength.skip(is);
      bipyramid = new PCStereoTrigonalBiPyramid();
      codeLength += bipyramid.decode(is, true);
      return codeLength;
    }

    if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
      codeLength += BerLength.skip(is);
      tshape = new PCStereoTShape();
      codeLength += tshape.decode(is, true);
      return codeLength;
    }

    if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
      codeLength += BerLength.skip(is);
      pentagonal = new PCStereoPentagonalBiPyramid();
      codeLength += pentagonal.decode(is, true);
      return codeLength;
    }

    if (passedTag != null) {
      return 0;
    }

    throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    appendAsString(sb, 0);
    return sb.toString();
  }

  public void appendAsString(final StringBuilder sb, final int indentLevel) {

    if (tetrahedral != null) {
      sb.append("tetrahedral: ");
      tetrahedral.appendAsString(sb, indentLevel + 1);
      return;
    }

    if (planar != null) {
      sb.append("planar: ");
      planar.appendAsString(sb, indentLevel + 1);
      return;
    }

    if (squareplanar != null) {
      sb.append("squareplanar: ");
      squareplanar.appendAsString(sb, indentLevel + 1);
      return;
    }

    if (octahedral != null) {
      sb.append("octahedral: ");
      octahedral.appendAsString(sb, indentLevel + 1);
      return;
    }

    if (bipyramid != null) {
      sb.append("bipyramid: ");
      bipyramid.appendAsString(sb, indentLevel + 1);
      return;
    }

    if (tshape != null) {
      sb.append("tshape: ");
      tshape.appendAsString(sb, indentLevel + 1);
      return;
    }

    if (pentagonal != null) {
      sb.append("pentagonal: ");
      pentagonal.appendAsString(sb, indentLevel + 1);
      return;
    }

    sb.append("<none>");
  }

  public byte[] getCode() {
    return code;
  }

  public void setCode(final byte[] code) {
    this.code = code;
  }

  public static long getSerialversionuid() {
    return serialVersionUID;
  }

}
