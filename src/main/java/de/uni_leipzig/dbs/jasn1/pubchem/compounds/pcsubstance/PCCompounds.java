/**
 * This class file was automatically generated by jASN1 v1.8.0 (http://www.openmuc.org)
 */

package de.uni_leipzig.dbs.jasn1.pubchem.compounds.pcsubstance;

import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.BerTag;

import de.uni_leipzig.dbs.jasn1.pubchem.util.PCCompoundFilter;

public class PCCompounds implements Serializable {

  private static final long serialVersionUID = 1L;

  public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
  public byte[] code = null;
  private List<PCCompound> seqOf = null;
  private PCCompoundFilter pcFilter = null;

  public PCCompounds() {
    seqOf = new ArrayList<>();
  }

  public PCCompounds(final PCCompoundFilter pcFilter) {
    this();
    this.pcFilter = pcFilter;
  }

  public PCCompounds(final byte[] code) {
    this.code = code;
  }

  public List<PCCompound> getPCCompound() {
    if (seqOf == null) {
      seqOf = new ArrayList<>();
    }
    return seqOf;
  }

  public int decode(final InputStream is) throws IOException {
    return decode(is, true);
  }

  public int decode(final InputStream is, final boolean withTag) throws IOException {
    int codeLength = 0;
    int subCodeLength = 0;
    BerTag berTag = new BerTag();
    if (withTag) {
      codeLength += tag.decodeAndCheck(is);
    }

    BerLength length = new BerLength();
    codeLength += length.decode(is);
    int totalLength = length.val;

    if (length.val == -1) {
      while (true) {
        subCodeLength += berTag.decode(is);

        if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
          int nextByte = is.read();
          if (nextByte != 0) {
            if (nextByte == -1) {
              throw new EOFException("Unexpected end of input stream.");
            }
            throw new IOException("Decoded sequence has wrong end of contents octets");
          }
          codeLength += subCodeLength + 1;
          return codeLength;
        }

        PCCompound element = new PCCompound(pcFilter);
        subCodeLength += element.decode(is, false);
        seqOf.add(element);
      }
    }
    throw new IOException("Unexpected end of sequence, length tag: " + totalLength
        + " But only indefinite length tag supported");
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    appendAsString(sb, 0);
    return sb.toString();
  }

  public void appendAsString(final StringBuilder sb, final int indentLevel) {

    sb.append("{\n");
    for (int i = 0; i < indentLevel + 1; i++) {
      sb.append("\t");
    }
    if (seqOf == null) {
      sb.append("null");
    } else {
      Iterator<PCCompound> it = seqOf.iterator();
      if (it.hasNext()) {
        it.next().appendAsString(sb, indentLevel + 1);
        while (it.hasNext()) {
          sb.append(",\n");
          for (int i = 0; i < indentLevel + 1; i++) {
            sb.append("\t");
          }
          it.next().appendAsString(sb, indentLevel + 1);
        }
      }
    }

    sb.append("\n");
    for (int i = 0; i < indentLevel; i++) {
      sb.append("\t");
    }
    sb.append("}");
  }

  public byte[] getCode() {
    return code;
  }

  public void setCode(final byte[] code) {
    this.code = code;
  }

  public List<PCCompound> getSeqOf() {
    return seqOf;
  }

  public void setSeqOf(final List<PCCompound> seqOf) {
    this.seqOf = seqOf;
  }

  public static long getSerialversionuid() {
    return serialVersionUID;
  }

  public static BerTag getTag() {
    return tag;
  }

}
